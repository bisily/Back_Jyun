#include <iostream>

using namespace std;

int num_move(int iN)
{
    if (iN == 0)
    {
        return 0;
    }
    else
    {
        return 2 * num_move(iN - 1) + 1;
    }
}

// 원반을 from에서 to로 옮긴다.
void move(int iFrom, int iTo)
{
    printf("%d %d\n", iFrom, iTo);
}

// n개의 원반을 from 에서 by를 거쳐 to로 옮긴다.
void hanoi(int iN, int iFrom, int iBy, int iTo)
{
    if (iN == 1)
    {
        move(iFrom, iTo);
    }
    else
    {
        hanoi(iN - 1, iFrom, iTo, iBy);     // 1번  N-1개의 원반을 기둥3을 거쳐 2로 옮긴다.
        move(iFrom, iTo);                   // 2번 기둥 1에서 1개의 원반을 기둥 3으롱 롬긴다.
        hanoi(iN - 1, iBy, iFrom, iTo);     // 3번 기둥 2에서 N-1개의 원반을 기둥 3으로 옮긴다.
    }
}

int main() {

    int iNum;

    cin >> iNum;
    cout << (1 << iNum) - 1 << endl;
    hanoi(iNum, 1, 2, 3);
}

/*
풀이


정석적인 하노이 탑의 풀이 방법을 따르면 된다.

1번 장대에 있는 원판을 3번 장대로 모두 옮기기 위한 방법은 무조건 동일한 절차를 따른다.



먼저 n-1개의 원판을 3번 장대를 거쳐 2번 장대로 옮기고,

1번 장대에 있는 가장 큰 크기의 원판을 3번 장대로 옮긴 후,

2번 장대에 있는 n-1개의 원판을 1번 장대를 거쳐 3번 장대로 올려 놓는 과정이다.



이를 그대로 알고리즘화하면 쉽게 풀 수 있다.



또한, 최소 횟수의 경우에는 하노이 탑에서 원판의 개수가 N일때,

2^N - 1 의 횟수가 최소 횟수이다.


1 << num 은 2^num 을 표현한 방식이다.

만약 해당 문제에서 pow(2,num)을 사용하였다면, double형을 활용하는 pow의 특성상 입력 최대값인 20이 입력되면 오차범위가 커져 틀렸습니다. 라는 메세지가 출력된다.

따라서 (int)pow(2,num); 을 활용하던가, 아니면 (1<<num) 같이 시프트 연산을 활용한 표현을 사용해야 한다.


*/
